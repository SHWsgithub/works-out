workout.html

<!DOCTYPE html>

<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#6366f1">
    <title>üí™ Ïö¥Îèô Ìä∏ÎûòÏª§</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

```
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding-bottom: 60px;
    }
    
    .app-header {
        background: rgba(255, 255, 255, 0.98);
        padding: 15px 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        position: sticky;
        top: 0;
        z-index: 100;
    }
    
    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .app-title {
        font-size: 1.3em;
        font-weight: bold;
        color: #333;
    }
    
    .week-indicator {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
    }
    
    .main-container {
        padding: 15px;
        max-width: 600px;
        margin: 0 auto;
    }
    
    .session-selector {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .session-header {
        font-size: 1.2em;
        font-weight: bold;
        color: #333;
        margin-bottom: 15px;
    }
    
    .phase-tabs {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .phase-tab {
        padding: 10px;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        background: white;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: 600;
        color: #666;
    }
    
    .phase-tab.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-color: transparent;
    }
    
    .session-list {
        max-height: 400px;
        overflow-y: auto;
        padding-right: 5px;
    }
    
    .session-list::-webkit-scrollbar {
        width: 6px;
    }
    
    .session-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }
    
    .session-list::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }
    
    .session-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        background: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.3s;
        border-left: 4px solid #e5e7eb;
        position: relative;
    }
    
    .session-item:hover {
        background: #e9ecef;
        transform: translateX(5px);
    }
    
    .session-item:active {
        transform: scale(0.98);
    }
    
    .session-item.completed {
        background: linear-gradient(to right, #f0fdf4, #dcfce7);
        border-left-color: #10b981;
    }
    
    .session-item.current {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-left-color: #fbbf24;
        border-left-width: 6px;
        box-shadow: 0 4px 10px rgba(99, 102, 241, 0.3);
    }
    
    .session-item.next {
        border-left-color: #fbbf24;
        background: #fffbeb;
    }
    
    .session-number {
        font-size: 1.2em;
        font-weight: bold;
        color: #6366f1;
        margin-right: 15px;
        min-width: 30px;
    }
    
    .session-item.completed .session-number {
        color: #10b981;
    }
    
    .session-item.current .session-number {
        color: white;
    }
    
    .session-details {
        flex: 1;
    }
    
    .session-name {
        font-weight: 600;
        font-size: 1em;
        margin-bottom: 3px;
    }
    
    .session-info {
        font-size: 0.85em;
        color: #666;
        display: flex;
        gap: 10px;
    }
    
    .session-item.current .session-info {
        color: rgba(255,255,255,0.9);
    }
    
    .check-mark {
        width: 24px;
        height: 24px;
        background: #10b981;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 14px;
        margin-left: auto;
    }
    
    .today-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .workout-header {
        margin-bottom: 15px;
    }
    
    .workout-title {
        font-size: 1.5em;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
    }
    
    .workout-subtitle {
        color: #666;
        font-size: 0.9em;
    }
    
    .exercise-item {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        border: 2px solid transparent;
        transition: all 0.3s;
    }
    
    .exercise-item.completed {
        border-color: #10b981;
        background: #f0fdf4;
    }
    
    .exercise-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .exercise-name {
        font-weight: 600;
        color: #333;
        font-size: 1.1em;
    }
    
    .exercise-weight {
        color: #6366f1;
        font-weight: 500;
        font-size: 0.95em;
    }
    
    .sets-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 8px;
    }
    
    .set-input {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        padding: 10px;
        text-align: center;
        font-size: 1em;
        font-weight: 500;
        transition: all 0.3s;
    }
    
    .set-input:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }
    
    .set-input.completed {
        background: #10b981;
        color: white;
        border-color: #10b981;
    }
    
    .complete-btn {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px;
        border-radius: 8px;
        font-size: 1em;
        font-weight: 600;
        margin-top: 10px;
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .complete-btn:active {
        transform: scale(0.98);
    }
    
    .complete-btn.completed {
        background: #10b981;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
        margin-top: 15px;
    }
    
    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .stat-label {
        color: #666;
        font-size: 0.8em;
        margin-bottom: 5px;
    }
    
    .stat-value {
        font-size: 1.5em;
        font-weight: bold;
        color: #333;
    }
    
    .bottom-nav {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    }
    
    .nav-item {
        padding: 12px;
        text-align: center;
        cursor: pointer;
        transition: background 0.3s;
        border: none;
        background: none;
        color: #666;
    }
    
    .nav-item.active {
        color: #6366f1;
    }
    
    .nav-item:active {
        background: #f0f0f0;
    }
    
    .nav-icon {
        font-size: 1.3em;
        margin-bottom: 2px;
    }
    
    .nav-label {
        font-size: 0.75em;
        display: block;
    }
    
    .progress-section {
        padding: 15px;
    }
    
    .progress-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .progress-title {
        font-weight: 600;
        color: #333;
    }
    
    .progress-value {
        color: #10b981;
        font-weight: bold;
    }
    
    .progress-bar {
        height: 8px;
        background: #e5e7eb;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        border-radius: 4px;
        transition: width 0.5s;
    }
    
    .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #666;
    }
    
    .empty-state-icon {
        font-size: 3em;
        margin-bottom: 15px;
    }
    
    .empty-state-text {
        font-size: 1.1em;
        color: #333;
    }
    
    .timer {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 10px;
        text-align: center;
        margin-top: 10px;
        display: none;
    }
    
    .timer.active {
        display: block;
    }
    
    .timer-display {
        font-size: 2em;
        font-weight: bold;
        color: #6366f1;
    }
    
    .timer-label {
        color: #666;
        font-size: 0.9em;
        margin-top: 5px;
    }
    
    .history-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .history-date {
        color: #666;
        font-size: 0.9em;
        margin-bottom: 5px;
    }
    
    .history-workout {
        font-weight: 600;
        color: #333;
        margin-bottom: 10px;
    }
    
    .history-stats {
        display: flex;
        justify-content: space-around;
        font-size: 0.9em;
    }
    
    .history-stat {
        text-align: center;
    }
    
    .start-workout-btn {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 10px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s;
        margin-top: 15px;
    }
    
    .start-workout-btn:active {
        transform: scale(0.98);
    }
    
    .error-message {
        background: #fef2f2;
        color: #dc2626;
        padding: 10px;
        border-radius: 8px;
        margin: 10px 0;
        text-align: center;
    }
</style>
```

</head>
<body>
    <div class="app-header">
        <div class="header-content">
            <div class="app-title">üí™ Ïö¥Îèô Ìä∏ÎûòÏª§</div>
            <div class="week-indicator" id="weekIndicator">Phase 1</div>
        </div>
    </div>

```
<div class="main-container" id="mainContainer">
    <!-- Ìôà ÏÑπÏÖò -->
    <div id="homeSection" class="section active">
        <!-- ÏÑ∏ÏÖò ÏÑ†ÌÉù Ïπ¥Îìú -->
        <div class="session-selector">
            <div class="session-header">üìÖ Ïö¥Îèô ÏÑ∏ÏÖò ÏÑ†ÌÉù</div>
            
            <div class="phase-tabs">
                <div class="phase-tab active" onclick="selectPhase(1)">Phase 1 (1-4Ï£º)</div>
                <div class="phase-tab" onclick="selectPhase(2)">Phase 2 (5-8Ï£º)</div>
            </div>
            
            <div id="sessionList" class="session-list">
                <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
            </div>
            
            <button class="start-workout-btn" id="startWorkoutBtn" onclick="startSelectedWorkout()">
                Ïö¥Îèô ÏãúÏûëÌïòÍ∏∞
            </button>
        </div>
        
        <!-- Ïò§ÎäòÏùò Ï∂îÏ≤ú -->
        <div class="today-card">
            <div class="workout-header">
                <div class="workout-title">üí° Ïò§ÎäòÏùò Ï∂îÏ≤ú</div>
                <div class="workout-subtitle" id="recommendText">ÎßàÏßÄÎßâ Ïö¥Îèô Ïù¥ÌõÑ Ìú¥ÏãùÏùÑ Ï∑®ÌñàÏäµÎãàÎã§</div>
            </div>
            <div id="recommendedSession" style="padding: 10px; background: #f8f9fa; border-radius: 8px; text-align: center;">
                <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
            </div>
        </div>
    </div>
    
    <!-- Ïö¥Îèô ÏÑπÏÖò -->
    <div id="workoutSection" class="section" style="display: none;">
        <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
    </div>
    
    <!-- ÏßÑÎèÑ ÏÑπÏÖò -->
    <div id="progressSection" class="section" style="display: none;">
        <div class="progress-section">
            <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
        </div>
    </div>
    
    <!-- Í∏∞Î°ù ÏÑπÏÖò -->
    <div id="historySection" class="section" style="display: none;">
        <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
    </div>
    
    <!-- ÏÑ§Ï†ï ÏÑπÏÖò -->
    <div id="settingsSection" class="section" style="display: none;">
        <div class="today-card">
            <h2 style="margin-bottom: 15px;">‚öôÔ∏è ÏÑ§Ï†ï</h2>
            <button class="complete-btn" onclick="exportData()">üì• Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞</button>
            <button class="complete-btn" style="background: #ef4444; margin-top: 10px;" onclick="resetData()">üóëÔ∏è Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî</button>
            <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 10px;">
                <p style="color: #666; font-size: 0.9em;">
                    <strong>ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥</strong><br>
                    Phase 1: Ï†ÑÏã†Ïö¥Îèô (A/B/C)<br>
                    Phase 2: Ï∂ïÎ∂ÑÌï† (Ï†ÑÎ©¥/ÌõÑÎ©¥)<br>
                    Ï¥ù 8Ï£º ÌîÑÎ°úÍ∑∏Îû®
                </p>
            </div>
        </div>
    </div>
</div>

<div class="bottom-nav">
    <button class="nav-item active" onclick="showSection('home')">
        <div class="nav-icon">üè†</div>
        <span class="nav-label">Ìôà</span>
    </button>
    <button class="nav-item" onclick="showSection('progress')">
        <div class="nav-icon">üìä</div>
        <span class="nav-label">ÏßÑÎèÑ</span>
    </button>
    <button class="nav-item" onclick="showSection('history')">
        <div class="nav-icon">üìÖ</div>
        <span class="nav-label">Í∏∞Î°ù</span>
    </button>
    <button class="nav-item" onclick="showSection('settings')">
        <div class="nav-icon">‚öôÔ∏è</div>
        <span class="nav-label">ÏÑ§Ï†ï</span>
    </button>
</div>

<script>
    // ÏóêÎü¨ Ìï∏Îì§Îü¨
    window.addEventListener('error', function(event) {
        console.error('Error caught:', event.error);
        showError('Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.');
        event.preventDefault();
    });
    
    // Ï†ÑÏ≤¥ ÌîÑÎ°úÍ∑∏Îû® Íµ¨Ï°∞
    const program = {
        phase1: {
            sessions: [
                '1', '2', '3', '4', '5', '6',  // 1-2Ï£º
                '7', '8', '9', '10', '11', '12'   // 3-4Ï£º
            ],
            workouts: {
                '1': {
                    name: 'ÏÑ∏ÏÖò 1 - ÌïòÏ≤¥/Í∞ÄÏä¥ Ï§ëÏã¨',
                    exercises: [
                        { name: 'Ïä§ÏøºÌä∏', sets: 3, reps: '8-10', weights: [40, 40, 45, 47.5], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '8-10', weights: [40, 40, 42.5, 45], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏãúÌã∞Îìú Î°úÏö∞', sets: 3, reps: '10-12', weights: [30, 30, 32.5, 35], alt: 'ÏºÄÏù¥Î∏î Î°úÏö∞' },
                        { name: 'ÏàÑÎçîÌîÑÎ†àÏä§ Î®∏Ïã†', sets: 3, reps: '10', weights: [20, 20, 22.5, 25], alt: 'Îç§Î≤® ÏàÑÎçîÌîÑÎ†àÏä§' },
                        { name: 'ÌîåÎû≠ÌÅ¨', sets: 3, reps: '30-45Ï¥à', weights: [0, 0, 0, 0], alt: 'Îç∞ÎìúÎ≤ÑÍ∑∏' }
                    ]
                },
                '2': {
                    name: 'ÏÑ∏ÏÖò 2 - Îì±/ÌïòÏ≤¥ ÌõÑÎ©¥',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 3, reps: '5', weights: [50, 50, 55, 60], alt: 'Î£®ÎßàÎãàÏïà Îç∞ÎìúÎ¶¨ÌîÑÌä∏' },
                        { name: 'Ïù∏ÌÅ¥ÎùºÏù∏ Îç§Î≤®ÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [12.5, 12.5, 15, 15], alt: 'Ïù∏ÌÅ¥ÎùºÏù∏ Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [30, 30, 35, 37.5], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î†àÍ∑∏ÌîÑÎ†àÏä§', sets: 3, reps: '12-15', weights: [60, 60, 70, 80], alt: 'ÌïµÏä§ÏøºÌä∏ Î®∏Ïã†' },
                        { name: 'ÌéòÏù¥Ïä§ÌíÄ', sets: 3, reps: '15-20', weights: [5, 5, 7.5, 7.5], alt: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†' }
                    ]
                },
                '3': {
                    name: 'ÏÑ∏ÏÖò 3 - Ï†ÑÏã† Í∑†Ìòï',
                    exercises: [
                        { name: 'Í≥†Î∏îÎ¶ø Ïä§ÏøºÌä∏', sets: 3, reps: '10', weights: [16, 16, 20, 24], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Îç§Î≤® Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [12.5, 12.5, 15, 15], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 3, reps: '12-15', weights: [30, 30, 35, 37.5], alt: 'Î®∏Ïã† Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏Ïª¨', sets: 3, reps: '12-15', weights: [20, 20, 25, 30], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏÇ¨Ïù¥Îìú ÌîåÎû≠ÌÅ¨', sets: 3, reps: '20-30Ï¥à', weights: [0, 0, 0, 0], alt: 'Îü¨ÏãúÏïà Ìä∏ÏúÑÏä§Ìä∏' }
                    ]
                },
                '4': {
                    name: 'ÏÑ∏ÏÖò 4 - ÌïòÏ≤¥/Í∞ÄÏä¥ Ï§ëÏã¨',
                    exercises: [
                        { name: 'Ïä§ÏøºÌä∏', sets: 3, reps: '8-10', weights: [40, 40, 45, 47.5], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '8-10', weights: [40, 40, 42.5, 45], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏãúÌã∞Îìú Î°úÏö∞', sets: 3, reps: '10-12', weights: [30, 30, 32.5, 35], alt: 'ÏºÄÏù¥Î∏î Î°úÏö∞' },
                        { name: 'ÏàÑÎçîÌîÑÎ†àÏä§ Î®∏Ïã†', sets: 3, reps: '10', weights: [20, 20, 22.5, 25], alt: 'Îç§Î≤® ÏàÑÎçîÌîÑÎ†àÏä§' },
                        { name: 'ÌîåÎû≠ÌÅ¨', sets: 3, reps: '30-45Ï¥à', weights: [0, 0, 0, 0], alt: 'Îç∞ÎìúÎ≤ÑÍ∑∏' }
                    ]
                },
                '5': {
                    name: 'ÏÑ∏ÏÖò 5 - Îì±/ÌïòÏ≤¥ ÌõÑÎ©¥',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 3, reps: '5', weights: [50, 50, 55, 60], alt: 'Î£®ÎßàÎãàÏïà Îç∞ÎìúÎ¶¨ÌîÑÌä∏' },
                        { name: 'Ïù∏ÌÅ¥ÎùºÏù∏ Îç§Î≤®ÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [12.5, 12.5, 15, 15], alt: 'Ïù∏ÌÅ¥ÎùºÏù∏ Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [30, 30, 35, 37.5], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î†àÍ∑∏ÌîÑÎ†àÏä§', sets: 3, reps: '12-15', weights: [60, 60, 70, 80], alt: 'ÌïµÏä§ÏøºÌä∏ Î®∏Ïã†' },
                        { name: 'ÌéòÏù¥Ïä§ÌíÄ', sets: 3, reps: '15-20', weights: [5, 5, 7.5, 7.5], alt: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†' }
                    ]
                },
                '6': {
                    name: 'ÏÑ∏ÏÖò 6 - Ï†ÑÏã† Í∑†Ìòï',
                    exercises: [
                        { name: 'Í≥†Î∏îÎ¶ø Ïä§ÏøºÌä∏', sets: 3, reps: '10', weights: [16, 16, 20, 24], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Îç§Î≤® Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [12.5, 12.5, 15, 15], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 3, reps: '12-15', weights: [30, 30, 35, 37.5], alt: 'Î®∏Ïã† Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏Ïª¨', sets: 3, reps: '12-15', weights: [20, 20, 25, 30], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏÇ¨Ïù¥Îìú ÌîåÎû≠ÌÅ¨', sets: 3, reps: '20-30Ï¥à', weights: [0, 0, 0, 0], alt: 'Îü¨ÏãúÏïà Ìä∏ÏúÑÏä§Ìä∏' }
                    ]
                },
                '7': {
                    name: 'ÏÑ∏ÏÖò 7 - ÌïòÏ≤¥/Í∞ÄÏä¥ Ï§ëÏã¨',
                    exercises: [
                        { name: 'Ïä§ÏøºÌä∏', sets: 3, reps: '8-10', weights: [45, 45, 47.5, 50], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '8-10', weights: [42.5, 42.5, 45, 47.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏãúÌã∞Îìú Î°úÏö∞', sets: 3, reps: '10-12', weights: [32.5, 32.5, 35, 37.5], alt: 'ÏºÄÏù¥Î∏î Î°úÏö∞' },
                        { name: 'ÏàÑÎçîÌîÑÎ†àÏä§ Î®∏Ïã†', sets: 3, reps: '10', weights: [22.5, 22.5, 25, 27.5], alt: 'Îç§Î≤® ÏàÑÎçîÌîÑÎ†àÏä§' },
                        { name: 'ÌîåÎû≠ÌÅ¨', sets: 3, reps: '45-60Ï¥à', weights: [0, 0, 0, 0], alt: 'Îç∞ÎìúÎ≤ÑÍ∑∏' }
                    ]
                },
                '8': {
                    name: 'ÏÑ∏ÏÖò 8 - Îì±/ÌïòÏ≤¥ ÌõÑÎ©¥',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 3, reps: '5', weights: [55, 55, 60, 65], alt: 'Î£®ÎßàÎãàÏïà Îç∞ÎìúÎ¶¨ÌîÑÌä∏' },
                        { name: 'Ïù∏ÌÅ¥ÎùºÏù∏ Îç§Î≤®ÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [15, 15, 17.5, 17.5], alt: 'Ïù∏ÌÅ¥ÎùºÏù∏ Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [35, 35, 37.5, 40], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î†àÍ∑∏ÌîÑÎ†àÏä§', sets: 3, reps: '12-15', weights: [70, 70, 80, 90], alt: 'ÌïµÏä§ÏøºÌä∏ Î®∏Ïã†' },
                        { name: 'ÌéòÏù¥Ïä§ÌíÄ', sets: 3, reps: '15-20', weights: [7.5, 7.5, 10, 10], alt: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†' }
                    ]
                },
                '9': {
                    name: 'ÏÑ∏ÏÖò 9 - Ï†ÑÏã† Í∑†Ìòï',
                    exercises: [
                        { name: 'Í≥†Î∏îÎ¶ø Ïä§ÏøºÌä∏', sets: 3, reps: '10', weights: [20, 20, 24, 28], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Îç§Î≤® Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [15, 15, 17.5, 17.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 3, reps: '12-15', weights: [35, 35, 37.5, 40], alt: 'Î®∏Ïã† Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏Ïª¨', sets: 3, reps: '12-15', weights: [25, 25, 30, 35], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏÇ¨Ïù¥Îìú ÌîåÎû≠ÌÅ¨', sets: 3, reps: '30-40Ï¥à', weights: [0, 0, 0, 0], alt: 'Îü¨ÏãúÏïà Ìä∏ÏúÑÏä§Ìä∏' }
                    ]
                },
                '10': {
                    name: 'ÏÑ∏ÏÖò 10 - ÌïòÏ≤¥/Í∞ÄÏä¥ Ï§ëÏã¨',
                    exercises: [
                        { name: 'Ïä§ÏøºÌä∏', sets: 3, reps: '8-10', weights: [47.5, 47.5, 50, 52.5], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '8-10', weights: [45, 45, 47.5, 50], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏãúÌã∞Îìú Î°úÏö∞', sets: 3, reps: '10-12', weights: [35, 35, 37.5, 40], alt: 'ÏºÄÏù¥Î∏î Î°úÏö∞' },
                        { name: 'ÏàÑÎçîÌîÑÎ†àÏä§ Î®∏Ïã†', sets: 3, reps: '10', weights: [25, 25, 27.5, 30], alt: 'Îç§Î≤® ÏàÑÎçîÌîÑÎ†àÏä§' },
                        { name: 'ÌîåÎû≠ÌÅ¨', sets: 3, reps: '45-60Ï¥à', weights: [0, 0, 0, 0], alt: 'Îç∞ÎìúÎ≤ÑÍ∑∏' }
                    ]
                },
                '11': {
                    name: 'ÏÑ∏ÏÖò 11 - Îì±/ÌïòÏ≤¥ ÌõÑÎ©¥',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 3, reps: '5', weights: [60, 60, 65, 70], alt: 'Î£®ÎßàÎãàÏïà Îç∞ÎìúÎ¶¨ÌîÑÌä∏' },
                        { name: 'Ïù∏ÌÅ¥ÎùºÏù∏ Îç§Î≤®ÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [15, 15, 17.5, 17.5], alt: 'Ïù∏ÌÅ¥ÎùºÏù∏ Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [37.5, 37.5, 40, 42.5], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î†àÍ∑∏ÌîÑÎ†àÏä§', sets: 3, reps: '12-15', weights: [80, 80, 90, 100], alt: 'ÌïµÏä§ÏøºÌä∏ Î®∏Ïã†' },
                        { name: 'ÌéòÏù¥Ïä§ÌíÄ', sets: 3, reps: '15-20', weights: [7.5, 7.5, 10, 10], alt: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†' }
                    ]
                },
                '12': {
                    name: 'ÏÑ∏ÏÖò 12 - Ï†ÑÏã† Í∑†Ìòï',
                    exercises: [
                        { name: 'Í≥†Î∏îÎ¶ø Ïä§ÏøºÌä∏', sets: 3, reps: '10', weights: [24, 24, 28, 32], alt: 'Î†àÍ∑∏ÌîÑÎ†àÏä§' },
                        { name: 'Îç§Î≤® Î≤§ÏπòÌîÑÎ†àÏä§', sets: 3, reps: '10-12', weights: [15, 15, 17.5, 17.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 3, reps: '12-15', weights: [37.5, 37.5, 40, 42.5], alt: 'Î®∏Ïã† Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏Ïª¨', sets: 3, reps: '12-15', weights: [30, 30, 35, 40], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏÇ¨Ïù¥Îìú ÌîåÎû≠ÌÅ¨', sets: 3, reps: '30-40Ï¥à', weights: [0, 0, 0, 0], alt: 'Îü¨ÏãúÏïà Ìä∏ÏúÑÏä§Ìä∏' }
                    ]
                }
            }
        },
        phase2: {
            sessions: [
                '13', '14', '15', '16',  // 5Ï£º
                '17', '18', '19', '20',  // 6Ï£º
                '21', '22', '23', '24',  // 7Ï£º
                '25', '26', '27', '28'   // 8Ï£º
            ],
            workouts: {
                '13': {
                    name: 'ÏÑ∏ÏÖò 13 - Ï†ÑÎ©¥Ïùº',
                    exercises: [
                        { name: 'ÌîÑÎ°†Ìä∏ Ïä§ÏøºÌä∏', sets: 4, reps: '6-8', weights: [35, 40, 42.5, 45], alt: 'ÌïµÏä§ÏøºÌä∏' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 4, reps: '6-8', weights: [45, 47.5, 50, 52.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Î†àÍ∑∏ ÏùµÏä§ÌÖêÏÖò', sets: 3, reps: '12-15', weights: [20, 25, 27.5, 30], alt: 'ÏãúÏãú Ïä§ÏøºÌä∏' },
                        { name: 'ÌéôÎç± ÌîåÎùºÏù¥', sets: 3, reps: '10-12', weights: [20, 25, 25, 30], alt: 'ÏºÄÏù¥Î∏î ÌîåÎùºÏù¥' },
                        { name: 'ÏÇ¨Ïù¥Îìú Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à', sets: 3, reps: '12-15', weights: [5, 7.5, 7.5, 10], alt: 'Î®∏Ïã† Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à' },
                        { name: 'ÏºÄÏù¥Î∏î ÌÅ¨Îü∞Ïπò', sets: 3, reps: '15-20', weights: [20, 20, 25, 25], alt: 'Ïï± Ìú†' }
                    ]
                },
                '14': {
                    name: 'ÏÑ∏ÏÖò 14 - ÌõÑÎ©¥Ïùº',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 4, reps: '5-6', weights: [60, 65, 70, 75], alt: 'ÎûôÌíÄ' },
                        { name: 'ÏãúÌã∞Îìú ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 4, reps: '8-10', weights: [35, 37.5, 40, 42.5], alt: 'Ìã∞Î∞î Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏ Ïª¨', sets: 3, reps: '12-15', weights: [15, 20, 22.5, 25], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏôÄÏù¥ÎìúÍ∑∏Î¶Ω Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [37.5, 40, 42.5, 45], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†', sets: 3, reps: '15-20', weights: [15, 20, 20, 25], alt: 'ÌéòÏù¥Ïä§ÌíÄ' },
                        { name: 'ÏãúÌã∞Îìú Ïπ¥ÌîÑÎ†àÏù¥Ï¶à', sets: 3, reps: '15-20', weights: [20, 25, 30, 30], alt: 'Ïä§ÌÉ†Îî© Ïπ¥ÌîÑÎ†àÏù¥Ï¶à' }
                    ]
                },
                '15': {
                    name: 'ÏÑ∏ÏÖò 15 - Ï†ÑÎ©¥Ïùº',
                    exercises: [
                        { name: 'ÌîÑÎ°†Ìä∏ Ïä§ÏøºÌä∏', sets: 4, reps: '6-8', weights: [35, 40, 42.5, 45], alt: 'ÌïµÏä§ÏøºÌä∏' },
                        { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 4, reps: '6-8', weights: [45, 47.5, 50, 52.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                        { name: 'Î†àÍ∑∏ ÏùµÏä§ÌÖêÏÖò', sets: 3, reps: '12-15', weights: [20, 25, 27.5, 30], alt: 'ÏãúÏãú Ïä§ÏøºÌä∏' },
                        { name: 'ÌéôÎç± ÌîåÎùºÏù¥', sets: 3, reps: '10-12', weights: [20, 25, 25, 30], alt: 'ÏºÄÏù¥Î∏î ÌîåÎùºÏù¥' },
                        { name: 'ÏÇ¨Ïù¥Îìú Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à', sets: 3, reps: '12-15', weights: [5, 7.5, 7.5, 10], alt: 'Î®∏Ïã† Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à' },
                        { name: 'ÏºÄÏù¥Î∏î ÌÅ¨Îü∞Ïπò', sets: 3, reps: '15-20', weights: [20, 20, 25, 25], alt: 'Ïï± Ìú†' }
                    ]
                },
                '16': {
                    name: 'ÏÑ∏ÏÖò 16 - ÌõÑÎ©¥Ïùº',
                    exercises: [
                        { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 4, reps: '5-6', weights: [60, 65, 70, 75], alt: 'ÎûôÌíÄ' },
                        { name: 'ÏãúÌã∞Îìú ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 4, reps: '8-10', weights: [35, 37.5, 40, 42.5], alt: 'Ìã∞Î∞î Î°úÏö∞' },
                        { name: 'Î†àÍ∑∏ Ïª¨', sets: 3, reps: '12-15', weights: [15, 20, 22.5, 25], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                        { name: 'ÏôÄÏù¥ÎìúÍ∑∏Î¶Ω Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [37.5, 40, 42.5, 45], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                        { name: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†', sets: 3, reps: '15-20', weights: [15, 20, 20, 25], alt: 'ÌéòÏù¥Ïä§ÌíÄ' },
                        { name: 'ÏãúÌã∞Îìú Ïπ¥ÌîÑÎ†àÏù¥Ï¶à', sets: 3, reps: '15-20', weights: [20, 25, 30, 30], alt: 'Ïä§ÌÉ†Îî© Ïπ¥ÌîÑÎ†àÏù¥Ï¶à' }
                    ]
                },
                '17': { name: 'ÏÑ∏ÏÖò 17 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '18': { name: 'ÏÑ∏ÏÖò 18 - ÌõÑÎ©¥Ïùº', exercises: [] },
                '19': { name: 'ÏÑ∏ÏÖò 19 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '20': { name: 'ÏÑ∏ÏÖò 20 - ÌõÑÎ©¥Ïùº', exercises: [] },
                '21': { name: 'ÏÑ∏ÏÖò 21 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '22': { name: 'ÏÑ∏ÏÖò 22 - ÌõÑÎ©¥Ïùº', exercises: [] },
                '23': { name: 'ÏÑ∏ÏÖò 23 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '24': { name: 'ÏÑ∏ÏÖò 24 - ÌõÑÎ©¥Ïùº', exercises: [] },
                '25': { name: 'ÏÑ∏ÏÖò 25 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '26': { name: 'ÏÑ∏ÏÖò 26 - ÌõÑÎ©¥Ïùº', exercises: [] },
                '27': { name: 'ÏÑ∏ÏÖò 27 - Ï†ÑÎ©¥Ïùº', exercises: [] },
                '28': { name: 'ÏÑ∏ÏÖò 28 - ÌõÑÎ©¥Ïùº', exercises: [] }
            }
        }
    };
    
    // 17-28 ÏÑ∏ÏÖò Ï±ÑÏö∞Í∏∞
    for (let i = 17; i <= 28; i++) {
        const isOdd = i % 2 === 1;
        const weekIndex = Math.floor((i - 13) / 4);
        
        if (isOdd) {
            // Ï†ÑÎ©¥Ïùº (ÌôÄÏàò)
            program.phase2.workouts[i.toString()].exercises = [
                { name: 'ÌîÑÎ°†Ìä∏ Ïä§ÏøºÌä∏', sets: 4, reps: '6-8', weights: [40 + weekIndex * 2.5, 42.5 + weekIndex * 2.5, 45 + weekIndex * 2.5, 47.5 + weekIndex * 2.5], alt: 'ÌïµÏä§ÏøºÌä∏' },
                { name: 'Î≤§ÏπòÌîÑÎ†àÏä§', sets: 4, reps: '6-8', weights: [47.5 + weekIndex * 2.5, 50 + weekIndex * 2.5, 52.5 + weekIndex * 2.5, 55 + weekIndex * 2.5], alt: 'Ï≤¥Ïä§Ìä∏ÌîÑÎ†àÏä§ Î®∏Ïã†' },
                { name: 'Î†àÍ∑∏ ÏùµÏä§ÌÖêÏÖò', sets: 3, reps: '12-15', weights: [25 + weekIndex * 2.5, 27.5 + weekIndex * 2.5, 30 + weekIndex * 2.5, 32.5 + weekIndex * 2.5], alt: 'ÏãúÏãú Ïä§ÏøºÌä∏' },
                { name: 'ÌéôÎç± ÌîåÎùºÏù¥', sets: 3, reps: '10-12', weights: [25, 27.5, 27.5, 30], alt: 'ÏºÄÏù¥Î∏î ÌîåÎùºÏù¥' },
                { name: 'ÏÇ¨Ïù¥Îìú Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à', sets: 3, reps: '12-15', weights: [7.5, 7.5, 10, 10], alt: 'Î®∏Ïã† Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à' },
                { name: 'ÏºÄÏù¥Î∏î ÌÅ¨Îü∞Ïπò', sets: 3, reps: '15-20', weights: [25, 25, 30, 30], alt: 'Ïï± Ìú†' }
            ];
        } else {
            // ÌõÑÎ©¥Ïùº (ÏßùÏàò)
            program.phase2.workouts[i.toString()].exercises = [
                { name: 'Îç∞ÎìúÎ¶¨ÌîÑÌä∏', sets: 4, reps: '5-6', weights: [65 + weekIndex * 5, 70 + weekIndex * 5, 75 + weekIndex * 5, 80 + weekIndex * 5], alt: 'ÎûôÌíÄ' },
                { name: 'ÏãúÌã∞Îìú ÏºÄÏù¥Î∏î Î°úÏö∞', sets: 4, reps: '8-10', weights: [37.5 + weekIndex * 2.5, 40 + weekIndex * 2.5, 42.5 + weekIndex * 2.5, 45 + weekIndex * 2.5], alt: 'Ìã∞Î∞î Î°úÏö∞' },
                { name: 'Î†àÍ∑∏ Ïª¨', sets: 3, reps: '12-15', weights: [20 + weekIndex * 2.5, 22.5 + weekIndex * 2.5, 25 + weekIndex * 2.5, 27.5 + weekIndex * 2.5], alt: 'ÎùºÏûâ Î†àÍ∑∏Ïª¨' },
                { name: 'ÏôÄÏù¥ÎìúÍ∑∏Î¶Ω Îû´ÌíÄÎã§Ïö¥', sets: 3, reps: '10-12', weights: [40 + weekIndex * 2.5, 42.5 + weekIndex * 2.5, 45 + weekIndex * 2.5, 47.5 + weekIndex * 2.5], alt: 'Ïñ¥ÏãúÏä§Ìä∏ ÌíÄÏóÖ' },
                { name: 'Î¶¨Î≤ÑÏä§ ÌîåÎùºÏù¥ Î®∏Ïã†', sets: 3, reps: '15-20', weights: [20, 22.5, 22.5, 25], alt: 'ÌéòÏù¥Ïä§ÌíÄ' },
                { name: 'ÏãúÌã∞Îìú Ïπ¥ÌîÑÎ†àÏù¥Ï¶à', sets: 3, reps: '15-20', weights: [25 + weekIndex * 5, 30 + weekIndex * 5, 35 + weekIndex * 5, 35 + weekIndex * 5], alt: 'Ïä§ÌÉ†Îî© Ïπ¥ÌîÑÎ†àÏù¥Ï¶à' }
            ];
        }
    }
    
    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Í¥ÄÎ¶¨
    const storage = {
        save: function(key, data) {
            try {
                localStorage.setItem(key, JSON.stringify(data));
            } catch (e) {
                console.error('Storage save error:', e);
            }
        },
        load: function(key, defaultValue = null) {
            try {
                const data = localStorage.getItem(key);
                return data ? JSON.parse(data) : defaultValue;
            } catch (e) {
                console.error('Storage load error:', e);
                return defaultValue;
            }
        },
        clear: function() {
            if (confirm('Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§. Ï†ïÎßê Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                localStorage.clear();
                location.reload();
            }
        }
    };
    
    // Ïï± ÏÉÅÌÉú Í¥ÄÎ¶¨
    let appState = storage.load('appState', {
        currentPhase: 1,
        completedSessions: [],
        currentSession: null,
        workoutHistory: [],
        startDate: new Date().toISOString().split('T')[0]
    });
    
    // Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± Ï≤¥ÌÅ¨
    if (!appState) {
        appState = {
            currentPhase: 1,
            completedSessions: [],
            currentSession: null,
            workoutHistory: [],
            startDate: new Date().toISOString().split('T')[0]
        };
    }
    if (!Array.isArray(appState.completedSessions)) appState.completedSessions = [];
    if (!Array.isArray(appState.workoutHistory)) appState.workoutHistory = [];
    
    let selectedSession = null;
    let currentWorkoutData = null;
    
    // ÏóêÎü¨ ÌëúÏãú
    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        document.body.insertBefore(errorDiv, document.body.firstChild);
        setTimeout(() => errorDiv.remove(), 5000);
    }
    
    // ÏÑ∏ÏÖò Î¶¨Ïä§Ìä∏ Î†åÎçîÎßÅ
    function renderSessionList() {
        try {
            const container = document.getElementById('sessionList');
            if (!container) return;
            
            const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
            if (!phase) return;
            
            // Îã§Ïùå Ìï¥ÏïºÌï† ÏÑ∏ÏÖò Ï∞æÍ∏∞
            let nextSessionIndex = -1;
            for (let i = 0; i < phase.sessions.length; i++) {
                const sessionKey = `phase${appState.currentPhase}_session${i}`;
                if (!appState.completedSessions.includes(sessionKey)) {
                    nextSessionIndex = i;
                    break;
                }
            }
            
            let html = '';
            phase.sessions.forEach((session, index) => {
                const sessionKey = `phase${appState.currentPhase}_session${index}`;
                const isCompleted = appState.completedSessions.includes(sessionKey);
                const isCurrent = selectedSession === sessionKey;
                const isNext = !isCompleted && index === nextSessionIndex;
                
                // Ï£ºÏ∞® Í≥ÑÏÇ∞
                const weekNum = Math.floor(index / (appState.currentPhase === 1 ? 3 : 4)) + 1;
                const weekOffset = appState.currentPhase === 1 ? 0 : 4;
                
                // ÏôÑÎ£åÎêú ÏÑ∏ÏÖòÏùò ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
                const completedWorkout = appState.workoutHistory.find(w => w && w.sessionKey === sessionKey);
                const dateText = completedWorkout ? 
                    new Date(completedWorkout.date).toLocaleDateString('ko-KR', { month: 'numeric', day: 'numeric' }) : '';
                
                // Ïö¥Îèô Ïù¥Î¶ÑÍ≥º ÎåÄÏ≤¥ Ïö¥Îèô ÌëúÏãú
                const workout = phase.workouts[session];
                const workoutName = workout ? workout.name : `ÏÑ∏ÏÖò ${index + 1}`;
                
                html += `
                    <div class="session-item ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''} ${isNext && !isCurrent ? 'next' : ''}" 
                         onclick="selectSession('${sessionKey}', '${session}')">
                        <div class="session-number">ÏÑ∏ÏÖò ${index + 1}</div>
                        <div class="session-details">
                            <div class="session-name">${workoutName}</div>
                            <div class="session-info">
                                <span>${weekNum + weekOffset}Ï£ºÏ∞®</span>
                                ${dateText ? `<span>ÏôÑÎ£å: ${dateText}</span>` : ''}
                            </div>
                        </div>
                        ${isCompleted ? '<div class="check-mark">‚úì</div>' : ''}
                    </div>
                `;
            });
            
            container.innerHTML = html;
        } catch (error) {
            console.error('renderSessionList error:', error);
        }
    }
    
    // Phase ÏÑ†ÌÉù
    function selectPhase(phase) {
        try {
            appState.currentPhase = phase;
            storage.save('appState', appState);
            
            const phaseTabs = document.querySelectorAll('.phase-tab');
            phaseTabs.forEach((tab, index) => {
                if (tab) {
                    if (index === phase - 1) {
                        tab.classList.add('active');
                    } else {
                        tab.classList.remove('active');
                    }
                }
            });
            
            const weekIndicator = document.getElementById('weekIndicator');
            if (weekIndicator) {
                weekIndicator.textContent = `Phase ${phase}`;
            }
            
            renderSessionList();
            updateRecommendation();
        } catch (error) {
            console.error('selectPhase error:', error);
        }
    }
    
    // ÏÑ∏ÏÖò ÏÑ†ÌÉù
    function selectSession(sessionKey, sessionType) {
        try {
            selectedSession = sessionKey;
            
            const btn = document.getElementById('startWorkoutBtn');
            if (!btn) return;
            
            const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
            const workoutName = phase.workouts[sessionType].name;
            
            if (appState.completedSessions.includes(sessionKey)) {
                btn.textContent = `${workoutName} Îã§ÏãúÌïòÍ∏∞`;
                btn.style.background = '#10b981';
            } else {
                btn.textContent = `${workoutName} ÏãúÏûëÌïòÍ∏∞`;
                btn.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
            }
            
            renderSessionList();
        } catch (error) {
            console.error('selectSession error:', error);
        }
    }
    
    // Ï∂îÏ≤ú ÏóÖÎç∞Ïù¥Ìä∏
    function updateRecommendation() {
        try {
            const recommendText = document.getElementById('recommendText');
            const recommendedSession = document.getElementById('recommendedSession');
            
            if (!recommendText || !recommendedSession) return;
            
            const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
            
            // Îã§Ïùå Ìï¥ÏïºÌï† ÏÑ∏ÏÖò Ï∞æÍ∏∞
            let nextSessionIndex = -1;
            for (let i = 0; i < phase.sessions.length; i++) {
                const sessionKey = `phase${appState.currentPhase}_session${i}`;
                if (!appState.completedSessions.includes(sessionKey)) {
                    nextSessionIndex = i;
                    break;
                }
            }
            
            if (nextSessionIndex === -1) {
                recommendText.textContent = 'Î™®Îì† ÏÑ∏ÏÖòÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§! üéâ';
                recommendedSession.innerHTML = '<strong>Phase ÏôÑÎ£å!</strong>';
                return;
            }
            
            const nextSession = phase.sessions[nextSessionIndex];
            const workoutName = phase.workouts[nextSession].name;
            
            // ÎßàÏßÄÎßâ Ïö¥Îèô Ïù¥ÌõÑ Í≤ΩÍ≥ºÏùº
            if (appState.workoutHistory.length > 0) {
                const lastWorkout = appState.workoutHistory[appState.workoutHistory.length - 1];
                const lastDate = new Date(lastWorkout.date);
                const today = new Date();
                const daysDiff = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));
                
                if (daysDiff === 0) {
                    recommendText.textContent = 'Ïò§Îäò Ïù¥ÎØ∏ Ïö¥ÎèôÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§! üí™';
                } else if (daysDiff === 1) {
                    recommendText.textContent = 'Ïñ¥Ï†ú Ïö¥Îèô ÌõÑ ÌïòÎ£® Ìú¥ÏãùÌñàÏäµÎãàÎã§';
                } else {
                    recommendText.textContent = `ÎßàÏßÄÎßâ Ïö¥Îèô ÌõÑ ${daysDiff}Ïùº Ìú¥ÏãùÌñàÏäµÎãàÎã§`;
                }
            } else {
                recommendText.textContent = 'Ï≤´ Ïö¥ÎèôÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!';
            }
            
            recommendedSession.innerHTML = `
                <strong>Îã§Ïùå Ï∂îÏ≤ú: ${workoutName}</strong><br>
                <span style="color: #666; font-size: 0.9em;">Phase ${appState.currentPhase} - ${nextSessionIndex + 1}Î≤àÏß∏ ÏÑ∏ÏÖò</span>
            `;
        } catch (error) {
            console.error('updateRecommendation error:', error);
        }
    }
    
    // ÏÑ†ÌÉùÌïú Ïö¥Îèô ÏãúÏûë
    function startSelectedWorkout() {
        try {
            if (!selectedSession) {
                const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
                for (let i = 0; i < phase.sessions.length; i++) {
                    const sessionKey = `phase${appState.currentPhase}_session${i}`;
                    if (!appState.completedSessions.includes(sessionKey)) {
                        selectedSession = sessionKey;
                        startWorkout(phase.sessions[i], i);
                        return;
                    }
                }
                alert('Î™®Îì† ÏÑ∏ÏÖòÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§!');
                return;
            } else {
                const match = selectedSession.match(/session(\d+)/);
                if (!match) return;
                const sessionIndex = parseInt(match[1]);
                const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
                const sessionType = phase.sessions[sessionIndex];
                startWorkout(sessionType, sessionIndex);
            }
        } catch (error) {
            console.error('startSelectedWorkout error:', error);
        }
    }
    
    // Ïö¥Îèô ÏãúÏûë
    function startWorkout(sessionType, sessionIndex) {
        try {
            const phase = appState.currentPhase === 1 ? program.phase1 : program.phase2;
            const workout = phase.workouts[sessionType];
            const weekIndex = Math.floor(sessionIndex / (appState.currentPhase === 1 ? 3 : 4));
            
            currentWorkoutData = {
                sessionKey: selectedSession,
                sessionType: sessionType,
                workout: workout,
                weekIndex: weekIndex,
                exercises: workout.exercises.map(ex => ({
                    ...ex,
                    weight: ex.weights[weekIndex],
                    completedReps: []
                }))
            };
            
            renderWorkoutSection();
            showSection('workout');
        } catch (error) {
            console.error('startWorkout error:', error);
        }
    }
    
    // Ïö¥Îèô ÏÑπÏÖò Î†åÎçîÎßÅ
    function renderWorkoutSection() {
        try {
            const section = document.getElementById('workoutSection');
            if (!section || !currentWorkoutData) return;
            
            const data = currentWorkoutData;
            
            let html = `
                <div class="today-card">
                    <div class="workout-header">
                        <div class="workout-title">${data.workout.name}</div>
                        <div class="workout-subtitle">Phase ${appState.currentPhase} - Week ${data.weekIndex + 1}</div>
                    </div>
                    
                    <div id="exerciseList">
            `;
            
            data.exercises.forEach((exercise, index) => {
                const altText = exercise.alt ? `(ÎåÄÏ≤¥: ${exercise.alt})` : '';
                
                html += `
                    <div class="exercise-item" id="exercise_${index}">
                        <div class="exercise-header">
                            <div>
                                <div class="exercise-name">${exercise.name}</div>
                                ${altText ? `<div style="font-size: 0.8em; color: #666; margin-top: 2px;">${altText}</div>` : ''}
                            </div>
                            <div class="exercise-weight">${exercise.weight}kg</div>
                        </div>
                        <div class="sets-container">
                `;
                
                for (let i = 0; i < exercise.sets; i++) {
                    html += `
                        <input type="number" 
                               class="set-input" 
                               placeholder="${exercise.reps}"
                               onchange="saveSet(${index}, ${i}, this.value)"
                               id="set_${index}_${i}">
                    `;
                }
                
                html += `
                        </div>
                        <button class="complete-btn" 
                                onclick="completeExercise(${index})">
                            ÏôÑÎ£å
                        </button>
                        <div class="timer" id="timer_${index}">
                            <div class="timer-display" id="timerDisplay_${index}">00:00</div>
                            <div class="timer-label">Ìú¥Ïãù ÏãúÍ∞Ñ</div>
                        </div>
                    </div>
                `;
            });
            
            html += `
                    </div>
                    
                    <button class="complete-btn" style="background: #10b981; margin-top: 20px;" 
                            onclick="finishWorkout()">
                        Ïö¥Îèô ÏôÑÎ£åÌïòÍ∏∞
                    </button>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">ÏôÑÎ£åÏú®</div>
                        <div class="stat-value" id="completionRate">0%</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Ï¥ù Î≥ºÎ•®</div>
                        <div class="stat-value" id="totalVolume">0kg</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Ïö¥Îèô ÏãúÍ∞Ñ</div>
                        <div class="stat-value" id="workoutTime">0Î∂Ñ</div>
                    </div>
                </div>
            `;
            
            section.innerHTML = html;
        } catch (error) {
            console.error('renderWorkoutSection error:', error);
        }
    }
    
    // ÏÑ∏Ìä∏ Ï†ÄÏû•
    function saveSet(exerciseIndex, setIndex, value) {
        try {
            if (!currentWorkoutData) return;
            
            if (!currentWorkoutData.exercises[exerciseIndex].completedReps) {
                currentWorkoutData.exercises[exerciseIndex].completedReps = [];
            }
            
            currentWorkoutData.exercises[exerciseIndex].completedReps[setIndex] = parseInt(value) || 0;
            
            const input = document.getElementById(`set_${exerciseIndex}_${setIndex}`);
            if (input) {
                if (value) {
                    input.classList.add('completed');
                } else {
                    input.classList.remove('completed');
                }
            }
            
            updateWorkoutStats();
        } catch (error) {
            console.error('saveSet error:', error);
        }
    }
    
    // Ïö¥Îèô ÏôÑÎ£å
    function completeExercise(exerciseIndex) {
        try {
            const exerciseItem = document.getElementById(`exercise_${exerciseIndex}`);
            if (!exerciseItem) return;
            
            const completeBtn = exerciseItem.querySelector('.complete-btn');
            
            exerciseItem.classList.toggle('completed');
            
            if (exerciseItem.classList.contains('completed')) {
                completeBtn.classList.add('completed');
                completeBtn.textContent = '‚úì ÏôÑÎ£å';
                startRestTimer(exerciseIndex);
            } else {
                completeBtn.classList.remove('completed');
                completeBtn.textContent = 'ÏôÑÎ£å';
            }
            
            updateWorkoutStats();
        } catch (error) {
            console.error('completeExercise error:', error);
        }
    }
    
    // Ìú¥Ïãù ÌÉÄÏù¥Î®∏
    let timers = {};
    function startRestTimer(exerciseIndex) {
        try {
            const timerEl = document.getElementById(`timer_${exerciseIndex}`);
            const displayEl = document.getElementById(`timerDisplay_${exerciseIndex}`);
            
            if (!timerEl || !displayEl) return;
            
            timerEl.classList.add('active');
            
            let seconds = 0;
            if (timers[exerciseIndex]) {
                clearInterval(timers[exerciseIndex]);
            }
            
            timers[exerciseIndex] = setInterval(() => {
                seconds++;
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                displayEl.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                
                if (seconds >= 180) {
                    displayEl.style.color = '#ef4444';
                } else if (seconds >= 90) {
                    displayEl.style.color = '#f59e0b';
                }
            }, 1000);
        } catch (error) {
            console.error('startRestTimer error:', error);
        }
    }
    
    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    function updateWorkoutStats() {
        try {
            if (!currentWorkoutData) return;
            
            let completed = 0;
            let totalVolume = 0;
            
            currentWorkoutData.exercises.forEach((exercise, index) => {
                const exerciseEl = document.getElementById(`exercise_${index}`);
                if (exerciseEl && exerciseEl.classList.contains('completed')) {
                    completed++;
                }
                
                if (exercise.completedReps) {
                    const volume = exercise.completedReps.reduce((sum, reps) => sum + (reps * exercise.weight), 0);
                    totalVolume += volume;
                }
            });
            
            const completionEl = document.getElementById('completionRate');
            const volumeEl = document.getElementById('totalVolume');
            
            if (completionEl) {
                completionEl.textContent = Math.round((completed / currentWorkoutData.exercises.length) * 100) + '%';
            }
            if (volumeEl) {
                volumeEl.textContent = totalVolume + 'kg';
            }
        } catch (error) {
            console.error('updateWorkoutStats error:', error);
        }
    }
    
    // Ïö¥Îèô Ï¢ÖÎ£å
    function finishWorkout() {
        try {
            if (!currentWorkoutData) return;
            
            const volumeEl = document.getElementById('totalVolume');
            const totalVolume = volumeEl ? parseInt(volumeEl.textContent) : 0;
            
            const workoutRecord = {
                sessionKey: currentWorkoutData.sessionKey,
                sessionType: currentWorkoutData.sessionType,
                date: new Date().toISOString(),
                exercises: currentWorkoutData.exercises,
                totalVolume: totalVolume
            };
            
            appState.workoutHistory.push(workoutRecord);
            
            if (!appState.completedSessions.includes(currentWorkoutData.sessionKey)) {
                appState.completedSessions.push(currentWorkoutData.sessionKey);
            }
            
            storage.save('appState', appState);
            
            alert('Ïö¥ÎèôÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üí™');
            
            currentWorkoutData = null;
            selectedSession = null;
            showSection('home');
        } catch (error) {
            console.error('finishWorkout error:', error);
        }
    }
    
    // ÏßÑÎèÑ ÏÑπÏÖò Î†åÎçîÎßÅ
    function renderProgressSection() {
        try {
            const section = document.querySelector('#progressSection .progress-section');
            if (!section) return;
            
            const totalSessions = appState.currentPhase === 1 ? 12 : 16;
            const completedCount = appState.completedSessions.filter(s => 
                s.startsWith(`phase${appState.currentPhase}_`)
            ).length;
            const progressPercent = totalSessions > 0 ? (completedCount / totalSessions) * 100 : 0;
            
            let html = `
                <div class="progress-item">
                    <div class="progress-header">
                        <div class="progress-title">Phase ${appState.currentPhase} ÏßÑÌñâÎ•†</div>
                        <div class="progress-value">${completedCount}/${totalSessions} ÏÑ∏ÏÖò</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    </div>
                </div>
            `;
            
            const recentLifts = {
                'Ïä§ÏøºÌä∏': 0,
                'Î≤§ÏπòÌîÑÎ†àÏä§': 0,
                'Îç∞ÎìúÎ¶¨ÌîÑÌä∏': 0
            };
            
            if (appState.workoutHistory.length > 0) {
                appState.workoutHistory.slice(-10).forEach(workout => {
                    if (workout && workout.exercises) {
                        workout.exercises.forEach(ex => {
                            if (ex && ex.name && recentLifts.hasOwnProperty(ex.name)) {
                                recentLifts[ex.name] = Math.max(recentLifts[ex.name], ex.weight || 0);
                            }
                        });
                    }
                });
            }
            
            Object.entries(recentLifts).forEach(([name, weight]) => {
                const target = name === 'Ïä§ÏøºÌä∏' ? 70 : name === 'Î≤§ÏπòÌîÑÎ†àÏä§' ? 60 : 80;
                const progress = target > 0 ? Math.min((weight / target) * 100, 100) : 0;
                
                html += `
                    <div class="progress-item">
                        <div class="progress-header">
                            <div class="progress-title">${name}</div>
                            <div class="progress-value">${weight}kg / ${target}kg</div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                    </div>
                `;
            });
            
            section.innerHTML = html;
        } catch (error) {
            console.error('renderProgressSection error:', error);
        }
    }
    
    // Í∏∞Î°ù ÏÑπÏÖò Î†åÎçîÎßÅ
    function renderHistorySection() {
        try {
            const section = document.getElementById('historySection');
            if (!section) return;
            
            if (appState.workoutHistory.length === 0) {
                section.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">üìö</div>
                        <div class="empty-state-text">ÏïÑÏßÅ Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§</div>
                    </div>
                `;
                return;
            }
            
            let html = '<div style="padding: 15px;">';
            
            appState.workoutHistory.slice(-10).reverse().forEach(workout => {
                if (!workout) return;
                
                const date = new Date(workout.date);
                const dateStr = date.toLocaleDateString('ko-KR', { 
                    month: 'long', day: 'numeric', weekday: 'short' 
                });
                
                const phase = workout.sessionKey && workout.sessionKey.includes('phase1') ? program.phase1 : program.phase2;
                const workoutName = phase.workouts[workout.sessionType] ? phase.workouts[workout.sessionType].name : 'Ïïå Ïàò ÏóÜÏùå';
                
                html += `
                    <div class="history-item">
                        <div class="history-date">${dateStr}</div>
                        <div class="history-workout">${workoutName}</div>
                        <div class="history-stats">
                            <div class="history-stat">
                                <div style="color: #666;">Ïö¥Îèô Ïàò</div>
                                <div style="font-weight: bold;">${workout.exercises ? workout.exercises.length : 0}Í∞ú</div>
                            </div>
                            <div class="history-stat">
                                <div style="color: #666;">Ï¥ù Î≥ºÎ•®</div>
                                <div style="font-weight: bold;">${workout.totalVolume || 0}kg</div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            section.innerHTML = html;
        } catch (error) {
            console.error('renderHistorySection error:', error);
        }
    }
    
    // ÏÑπÏÖò Ï†ÑÌôò
    function showSection(sectionName) {
        try {
            const sections = document.querySelectorAll('.section');
            sections.forEach(s => {
                if (s) s.style.display = 'none';
            });
            
            const navItems = document.querySelectorAll('.nav-item');
            navItems.forEach(n => {
                if (n) n.classList.remove('active');
            });
            
            switch(sectionName) {
                case 'home':
                    const homeSection = document.getElementById('homeSection');
                    if (homeSection) {
                        homeSection.style.display = 'block';
                    }
                    if (navItems[0]) navItems[0].classList.add('active');
                    renderSessionList();
                    updateRecommendation();
                    break;
                case 'workout':
                    const workoutSection = document.getElementById('workoutSection');
                    if (workoutSection) {
                        workoutSection.style.display = 'block';
                    }
                    break;
                case 'progress':
                    const progressSection = document.getElementById('progressSection');
                    if (progressSection) {
                        progressSection.style.display = 'block';
                    }
                    if (navItems[1]) navItems[1].classList.add('active');
                    renderProgressSection();
                    break;
                case 'history':
                    const historySection = document.getElementById('historySection');
                    if (historySection) {
                        historySection.style.display = 'block';
                    }
                    if (navItems[2]) navItems[2].classList.add('active');
                    renderHistorySection();
                    break;
                case 'settings':
                    const settingsSection = document.getElementById('settingsSection');
                    if (settingsSection) {
                        settingsSection.style.display = 'block';
                    }
                    if (navItems[3]) navItems[3].classList.add('active');
                    break;
            }
        } catch (error) {
            console.error('showSection error:', error);
        }
    }
    
    // Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    function exportData() {
        try {
            const data = JSON.stringify(appState, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `workout_data_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
        } catch (error) {
            console.error('exportData error:', error);
            alert('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®');
        }
    }
    
    // Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
    function resetData() {
        storage.clear();
    }
    
    // Ïï± Ï¥àÍ∏∞Ìôî
    function initApp() {
        try {
            storage.save('appState', appState);
            selectPhase(appState.currentPhase || 1);
        } catch (error) {
            console.error('initApp error:', error);
            showError('Ïï± Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    }
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïã§Ìñâ
    document.addEventListener('DOMContentLoaded', function() {
        try {
            initApp();
        } catch (error) {
            console.error('DOMContentLoaded error:', error);
        }
    });
</script>
```

</body>
</html>